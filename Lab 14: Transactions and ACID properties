mydb=# BEGIN;
BEGIN
mydb=# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE 1
mydb=# UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
UPDATE 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE 1
mydb=# UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
UPDATE 1
mydb=# ROLLBACK;
ROLLBACK

mydb=# BEGIN;
BEGIN
mydb=# SELECT balance FROM accounts WHERE account_id = 1;
 balance 
----------
   1200.00
(1 row)

mydb=# UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE 1
mydb=# UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;
UPDATE 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT 0 1
mydb=# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
INSERT 0 1
mydb=# UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
UPDATE 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT 0 1
mydb=# INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
INSERT 0 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
mydb=# SELECT * FROM accounts;
 account_id | balance  
-------------+----------
 1           |  700.00
 2           |  1300.00
(2 rows)
mydb=# COMMIT;
COMMIT


mydb=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN
mydb=# SELECT * FROM accounts WHERE balance > 1000;
 account_id | balance  
-------------+----------
 2           | 1300.00
(1 row)

mydb=# COMMIT;
COMMIT

mydb=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN
mydb=# SELECT * FROM accounts WHERE balance > 1000;
 account_id | balance  
-------------+----------
 2           | 1300.00
(1 row)

mydb=# COMMIT;
COMMIT

mydb=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN
mydb=# SELECT * FROM accounts;
 account_id | balance  
-------------+----------
 1           | 700.00
 2           | 1300.00
(2 rows)

mydb=# UPDATE accounts SET balance = balance * 1.05;
UPDATE 2
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');
INSERT 0 1
mydb=# SAVEPOINT after_customer_insert;
SAVEPOINT
mydb=# INSERT INTO orders (customer_id, total) VALUES (1, 500.00);
INSERT 0 1
mydb=# ROLLBACK TO SAVEPOINT after_customer_insert;
ROLLBACK
mydb=# INSERT INTO orders (customer_id, total) VALUES (1, 300.00);
INSERT 0 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
INSERT 0 1
mydb=# SAVEPOINT sp1;
SAVEPOINT
mydb=# INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
INSERT 0 1
mydb=# SAVEPOINT sp2;
SAVEPOINT
mydb=# INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
ERROR:  new row for relation "products" violates check constraint "positive_price"
mydb=# ROLLBACK TO SAVEPOINT sp2;
ROLLBACK
mydb=# INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);
INSERT 0 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# INSERT INTO logs (message) VALUES ('Starting process');
INSERT 0 1
mydb=# SAVEPOINT process_start;
SAVEPOINT
mydb=# INSERT INTO logs (message) VALUES ('Process completed');
INSERT 0 1
mydb=# RELEASE SAVEPOINT process_start;
RELEASE SAVEPOINT
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# UPDATE inventory SET stock = stock - 1 WHERE product_id = 101;
UPDATE 1
mydb=# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 1);
INSERT 0 1
mydb=# COMMIT;
COMMIT

mydb=# BEGIN;
BEGIN
mydb=# DO $$
DECLARE
    insufficient_funds EXCEPTION;
    current_balance DECIMAL;
BEGIN
    SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;
    IF current_balance < 100 THEN
        RAISE insufficient_funds;
    END IF;
    UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
    UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
EXCEPTION
    WHEN insufficient_funds THEN
        RAISE NOTICE 'Transaction failed: Insufficient funds';
        ROLLBACK;
END $$;
DO
NOTICE:  Transaction failed: Insufficient funds

mydb=# SELECT 
    blocked_locks.pid AS blocked_pid,
    blocked_activity.usename AS blocked_user,
    blocking_locks.pid AS blocking_pid,
    blocking_activity.usename AS blocking_user,
    blocked_activity.query AS blocked_statement
FROM pg_catalog.pg_locks blocked_locks
JOIN pg_catalog.pg_stat_activity blocked_activity 
    ON blocked_activity.pid = blocked_locks.pid
JOIN pg_catalog.pg_locks blocking_locks 
    ON blocking_locks.locktype = blocked_locks.locktype
WHERE NOT blocked_locks.granted;
 blocked_pid | blocked_user | blocking_pid | blocking_user | blocked_statement 
--------------+--------------+---------------+----------------+------------------
(0 rows)

mydb=# BEGIN;
BEGIN

mydb=# INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT 0 1
mydb=# INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT 0 1
mydb=# INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
INSERT 0 1
mydb=# COMMIT;
COMMIT
