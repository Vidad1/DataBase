vidadi@Vidadis-MacBook-Pro ~ % psql -U vidadi -d mydb -h localhost -p 5432
psql (15.14 (Homebrew), server 15.13 (Homebrew))
Type "help" for help.

mydb=# CREATE TABLE departments (
mydb(# dept_id SERIAL PRIMARY KEY,
mydb(# dept_name VARCHAR(100) NOT NULL,
mydb(# location VARCHAR(100)
mydb(# );
CREATE TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
mydb(# first_name VARCHAR(50) NOT NULL,
mydb(# last_name VARCHAR(50) NOT NULL,
mydb(# dept_id INTEGER REFERENCES departments(dept_id)
mydb(# );
CREATE TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
mydb(# emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
mydb(# last_name VARCHAR(50) NOT NULL,
mydb(# dept_id INTEGER,
mydb(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
mydb(# );
CREATE TABLE
mydb=# \d employees
                                       Table "public.employees"
   Column   |         Type          | Collation | Nullable |                  Default                  
------------+-----------------------+-----------+----------+-------------------------------------------
 emp_id     | integer               |           | not null | nextval('employees_emp_id_seq'::regclass)
 first_name | character varying(50) |           | not null | 
 last_name  | character varying(50) |           | not null | 
 dept_id    | integer               |           |          | 
Indexes:
    "employees_pkey" PRIMARY KEY, btree (emp_id)
Foreign-key constraints:
    "employees_dept_id_fkey" FOREIGN KEY (dept_id) REFERENCES departments(dept_id)

mydb=# DROP TABLE employees;
DROP TABLE
mydb=# 
mydb=# CREATE TABLE employees(
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        dept_id INTEGER
);
CREATE TABLE
mydb=# ALTER TABLE employees
mydb-# ADD CONSTRAINT fk_employee_department
mydb-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR (50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER,
        CONSTRAINT fk_employee_department
        FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
mydb=# INSERT INTO departments (dept_name, location) VALUES ('Engineering', 'Building A'), ('Marketing', 'Building B'), ('HR', 'Building C');
INSERT 0 3
mydb=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
('John', 'Smith', 1) ;
INSERT 0 1
mydb=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
(' Jane', 'Doe', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employee_department"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".
mydb=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employee_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR (50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
mydb=# SELECT * FROM departments;
 dept_id | dept_name |  location  
---------+-----------+------------
       2 | Marketing | Building B
       3 | HR        | Building C
(2 rows)

mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON DELETE SET DEFaULT
);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR (50) NOT NULL,
        dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
mydb=# DELETE FROM departments WHERE dept_id = 1; // no error because no employees exist
DELETE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON UPDATE CASCADE
);
CREATE TABLE
mydb=# UPDATE departments SET dept_id=100 WHERE dept_id=1;
UPDATE 0
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# CREATE TABLE employees (
        emp_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id)
                ON DELETE RESTRICT
                ON UPDATE CASCADE
);
CREATE TABLE
mydb=# DROP TABLE employees;
DROP TABLE
mydb=# DROP TABLE departments;
DROP TABLE
mydb=# CREATE TABLE users (
        user_id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR (100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE
mydb=# CREATE TABLE user_profiles (
        profile_id SERIAL PRIMARY KEY,
        user_id INTEGER UNIQUE NOT NULL,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        bio TEXT,
        profile_picture_url VARCHAR (255) ,
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
mydb=# DROP TABLE user_profiles;
DROP TABLE
mydb=# CREATE TABLE user_profiles (
        user_id INTEGER PRIMARY KEY,
        first_name VARCHAR(50) ,
        last_name VARCHAR(50),
        bio TEXT,
        profile_picture_url VARCHAR(255) ,
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
mydb=# INSERT INTO users (username, email) VALUES ('johndoe', 'john@example.com');
INSERT 0 1
mydb=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES (1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1
mydb=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES  (1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_pkey"
DETAIL:  Key (user_id)=(1) already exists.
mydb=# DROP TABLE user_profiles;
DROP TABLE
mydb=# DROP TABLE users;
DROP TABLE
mydb=# CREATE TABLE departments (
        dept_id SERIAL PRIMARY KEY,
        dept_name VARCHAR (100) NOT NULL,
        manager_name VARCHAR (100) ,
        budget DECIMAL (10,2)
);
CREATE TABLE
mydb=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
position VARCHAR (100), salary DECIMAL (10,2) ,
hire_date DATE DEFAULT CURRENT_DATE,
dept_id INTEGER NOT NULL,
FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
mydb=# CREATE TABLE blog_posts (
post_id SERIAL PRIMARY KEY,
title VARCHAR(200) NOT NULL,
content TEXT, author VARCHAR (100),
published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE
mydb=# CREATE TABLE comments (
comment_id SERIAL PRIMARY KEY,
post_id INTEGER NOT NULL,
commenter_name VARCHAR (100) ,
comment_text TEXT NOT NULL, comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE
);
CREATE TABLE
mydb=# INSERT INTO departments (dept_name, manager_name, budget) VALUES ('Engineering', 'Alice Johnson', 500000.00), ('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2
mydb=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES ('John', 'Smith', 'Software Engineer', 75000.00, 1),
('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
('Mike' , 'Brown', 'DevOps Engineer', 80000.00, 1),
('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
mydb=# SELECT d.dept_name, e.first_name, e.last_name, e.position FROM departments d JOIN employees e ON d.dept_id = e.dept_id ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position       
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)

mydb=# CREATE TABLE students (
student_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
email VARCHAR (100) UNIQUE,
enrollment_date DATE DEFAULT CURRENT_DATE
);
CREATE TABLE
mydb=# CREATE TABLE courses (
course_id SERIAL PRIMARY KEY,
course_code VARCHAR(10) UNIQUE NOT NULL,
course_name VARCHAR(100) NOT NULL,
credits INTEGER NOT NULL,
instructor VARCHAR(100)
);
CREATE TABLE
mydb=# CREATE TABLE student_enrollments (
enrollment_id SERIAL PRIMARY KEY,
student_id INTEGER NOT NULL,
course_id INTEGER NOT NULL,
enrollment_date DATE DEFAULT CURRENT_DATE,
grade CHAR(2),
FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
UNIQUE (student_id, course_id)
);                            
CREATE TABLE
mydb=# INSERT INTO students (first_name, last_name, email) VALUES ('Alice', 'Johnson', 'alice@university.edu'), ('Bob', 'Smith', 'bob@university.edu'), ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
mydb=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
('CS201', 'Data Structures', 4, 'Dr. Davis'),
('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
mydb=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
(1,1,'A'),
(1,2,'B+'),
(2,1,'A-'),
(2,3,'B'),
(3,2,'A'),
(3,3,'A-');
INSERT 0 6
mydb=# SELECT
s.first_name || ' ' || s.last_name AS student_name,
c.course_code,
c.course_name,
se.grade,
se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s. last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date 
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-09-16
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-09-16
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-09-16
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-09-16
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-09-16
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-09-16
(6 rows)

mydb=# SELECT s. first_name, s.last_name, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'CS101';
 first_name | last_name | grade 
------------+-----------+-------
 Alice      | Johnson   | A 
 Bob        | Smith     | A-
(2 rows)

mydb=# SELECT c.course_code, c.course_name, c.credits, se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade 
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A 
 CS201       | Data Structures             |       4 | B+
(2 rows)

mydb=# \q
